paths:
  /api/users:
    get:
      tags:
        - Admin
      summary: Get all users (admin only)
      description: Returns a list of all users. Only accessible by admin users.
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        "401":
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Admin
      summary: Create a new user (admin only)
      description: Creates a new user. Only accessible by admin users.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        "400":
          $ref: '#/components/responses/ValidationError'
        "401":
          $ref: '#/components/responses/Unauthorized'

  /api/products:
    post:
      tags:
        - Admin
      summary: Create a new product (admin only)
      description: Creates a new product. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductDto'
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      product:
                        $ref: '#/components/schemas/Product'
        "400":
          $ref: '#/components/responses/ValidationError'
        "401":
          $ref: '#/components/responses/UnauthorizedCreateProduct'


  /api/users/{id}:
    get:
      tags:
        - Admin
      summary: Get user by ID (admin only)
      description: Returns a user by ID. Only accessible by admin users.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        "400":
          $ref: '#/components/responses/ValidationError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

    patch:
      tags:
        - Admin
      summary: Update user by ID (admin only)
      description: Updates a user by ID. Only accessible by admin users. Only main admin can update other admins.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        "400":
          $ref: '#/components/responses/ValidationError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Admin
      summary: Delete user by ID (admin only)
      description: Deletes a user by ID. Only accessible by admin users. Only main admin can delete other admins.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        "204":
          description: User deleted successfully
        "400":
          $ref: '#/components/responses/ValidationError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

  /api/users/get-users-count:
    get:
      tags:
        - Admin
      summary: Get users count by period (admin only)
      description: Returns the number of users grouped by day/week/month/year/all. Only accessible by admin users.
      parameters:
        - in: query
          name: period
          required: true
          schema:
            type: string
            enum: [week, month, year, all]
          description: Period to group user counts by
      responses:
        "200":
          description: Users count by period
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      usersCountByDay:
                        type: array
                        items:
                          type: object
                          properties:
                            date:
                              type: string
                              format: date
                              example: "2024-05-01"
                            count:
                              type: integer
                              example: 5
        "400":
          $ref: '#/components/responses/ValidationError'
        "401":
          $ref: '#/components/responses/Unauthorized'


components:
  responses:
    UnauthorizedCreateProduct:
      description: Unauthorized. Possible reasons for 401 errors when creating a product.
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      nullable: true
                      example: null
                    message:
                      type: string
                      example: "شما وارد نشده اید! لطفا برای دسترسی وارد شوید"
          examples:
            NoToken:
              summary: No token provided
              value:
                status: fail
                errors:
                  - field: null
                    message: "شما وارد نشده اید! لطفا برای دسترسی وارد شوید"
            InvalidToken:
              summary: Invalid token
              value:
                status: fail
                errors:
                  - field: null
                    message: "توکن معتبر نیست"
            UserNotExist:
              summary: User for token does not exist
              value:
                status: fail
                errors:
                  - field: null
                    message: "کاربر متعلق به این توکن دیگر وجود ندارد!"
            UserInactive:
              summary: User is inactive
              value:
                status: fail
                errors:
                  - field: null
                    message: "کاربری که به این ایمیل مرتبط است غیرفعال شده!"
            PasswordChanged:
              summary: User changed password after token was issued
              value:
                status: fail
                errors:
                  - field: null
                    message: "کاربر اخیرا رمز عبور را تغییر داده است! لطفا دوباره وارد شوید."
            NotAdmin:
              summary: User's role is not admin
              value:
                status: fail
                errors:
                  - field: null
                    message: "شما اجازه انجام این عمل را ندارید!"

