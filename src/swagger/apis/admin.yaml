
############################################
########### USER ENDPOINTS #################
############################################

paths:
  /api/users:
    #--------------------------------------------
    #----------- GET ALL USERS ------------------
    #--------------------------------------------
    get:
      tags:
        - Admin
      summary: Get all users 
      description: Returns a list of all users. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/get-users-query-params'
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        "401":
          $ref: '#/components/responses/Unauthorized'
    post:
      #--------------------------------------------
      #----------- CREATE USER ------------------
      #--------------------------------------------
      tags:
        - Admin
      summary: Create a new user
      description: Creates a new user. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/Dtos/CreateUserDto'
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        "400":
          $ref: '#/components/responses/ValidationError'
        "401":
          $ref: '#/components/responses/Unauthorized'

############################################
########### PRODUCT ENDPOINTS ##############
############################################

  /api/products:
    #--------------------------------------------
    #----------- GET ALL PRODUCTS ------------------
    #--------------------------------------------
    get:
      tags:
        - Admin
      summary: Get all products
      description: Returns a list of all products. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/get-products-query-params' 
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
        "401":
          $ref: '#/components/responses/Unauthorized'
    post:
      #--------------------------------------------
      #----------- CREATE PRODUCT ------------------
      #--------------------------------------------
      tags:
        - Admin
      summary: Create a new product
      description: Creates a new product. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/Dtos/CreateProductDto'
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      product:
                        $ref: '#/components/schemas/Product'
        "400":
          $ref: '#/components/responses/ValidationError'
        "401":
          $ref: '#/components/responses/Unauthorized'


  /api/users/{id}:
    #--------------------------------------------
    #----------- GET USER BY ID ------------------
    #--------------------------------------------
    get:
      tags:
        - Admin
      summary: Get user by ID
      description: Returns a user by ID. Only accessible by admin users.
      parameters:
        - $ref: '#/components/parameters/get-user-by-id-path-params'
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        "400":
          $ref: '#/components/responses/ValidationError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

    patch:
      #--------------------------------------------
      #----------- UPDATE USER BY ID ------------------
      #--------------------------------------------
      tags:
        - Admin
      summary: Update user by ID
      description: Updates a user by ID. Only accessible by admin users. Only main admin can update other admins.
      parameters:
        - $ref: '#/components/parameters/get-user-by-id-path-params'
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/Dtos/UpdateUserDto'
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        "400":
          $ref: '#/components/responses/ValidationError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "401-alt":
          description: Unauthorized. An admin tries to update another admin or the main admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: null
                        message:
                          type: string
                          example: "شما نمی توانید حساب ادمین را آپدیت کنید فقط مدیر سیستم می تواند این کار را انجام دهد"
        "404":
          $ref: '#/components/responses/NotFound'

    delete:
      #--------------------------------------------
      #----------- DELETE USER BY ID ------------------
      #--------------------------------------------
      tags:
        - Admin
      summary: Delete user by ID
      description: Deletes a user by ID. Only accessible by admin users. Only main admin can delete other admins.
      parameters:
        - $ref: '#/components/parameters/get-user-by-id-path-params'
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        "204":
          description: User deleted successfully
        "400":
          $ref: '#/components/responses/ValidationError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "401-alt":
          description: Unauthorized. An admin tries to delete another admin or the main admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: null
                        message:
                          type: string
                          example: "شما نمی توانید حساب ادمین را حذف کنید فقط مدیر سیستم می تواند این کار را انجام دهد"
        "404":
          $ref: '#/components/responses/NotFound'


  /api/users/get-users-count:
    #--------------------------------------------
    #----------- GET USERS COUNT ------------------
    #--------------------------------------------
    get:
      tags:
        - Admin
      summary: Get users count by period
      description: Returns the number of users grouped by day/week/month/year/all. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/get-users-count-query-params'
      responses:
        "200":
          description: Users count by period
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      usersCountByDay:
                        type: array
                        items:
                          type: object
                          properties:
                            date:
                              type: string
                              format: date
                              example: "2024-05-01"
                            count:
                              type: integer
                              example: 5
        "400":
          $ref: '#/components/responses/ValidationError'
        "401":
          $ref: '#/components/responses/Unauthorized'

############################################
########### REFERENCES #####################
############################################

components:
  Dtos:
    CreateUserDto:
      type: object
      required:
        - name
        - email
        - password
        - passwordConfirmation
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com
        password:
          type: string
          format: password
          example: StrongPass123!
        passwordConfirmation:
          type: string
          format: password
          example: StrongPass123!
        active:
          type: boolean
          example: true
    UpdateUserDto:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com
        photo:
          type: string
          example: https://example.com/avatar.jpg
        active:
          type: boolean
          example: true
    CreateProductDto:
      type: object
      required:
        - name
        - description
        - image
        - price
        - countInStock
        - brand
        - category
      properties:
        name:
          type: string
          example: لپ تاپ Asus VivoBook
        description:
          type: string
          example: لپ تاپ قدرتمند با پردازنده Intel Core i5
        image:
          type: string
          example: https://example.com/laptop.jpg
        images:
          type: array
          items:
            type: string
            example: https://example.com/laptop2.jpg
        price:
          type: number
          example: 15000000
        countInStock:
          type: integer
          example: 25
        brand:
          type: string
          example: Asus
        category:
          type: string
          example: لپ تاپ
        discount:
          type: number
          example: 5
        isAvailable:
          type: boolean
          example: true
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          example: 60d21b4667d0d8992e610c85
        name:
          type: string
          example: Product Name
        slug:
          type: string
          example: product-name
        description:
          type: string
          example: Product description
        image:
          type: string
          example: https://example.com/image.jpg
        images:
          type: array
          items:
            type: string
            example: https://example.com/image2.jpg
        countInStock:
          type: integer
          example: 10
        isAvailable:
          type: boolean
          example: true
        brand:
          type: string
          example: Brand Name
        category:
          type: string
          example: Category Name
        rating:
          type: number
          example: 4.5
        numReviews:
          type: integer
          example: 5
        price:
          type: number
          example: 100000
        discount:
          type: number
          example: 10
        discountedPrice:
          type: number
          example: 90000
    User:
      type: object
      properties:
        id:
          type: string
          example: 60d21b4667d0d8992e610c85
        name:
          type: string
          example: User Name
        email:
          type: string
          example: user@example.com
        photo:
          type: string
          example: https://example.com/photo.jpg
        role:
          type: string
          enum:
            - user
            - admin
          example: user
        active:
          type: boolean
          example: true
    pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        pages:
          type: integer
          example: 10
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        skip:
          type: integer
          example: 10
  parameters:
    get-users-query-params:
      name: page
      in: query
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            example: 1
          limit:
            type: integer
            example: 10
          sort:
            type: string
            enum: [asc, desc]
            example: desc
          search:
            type: string
            example: ""
          name:
            type: string
            example: ""
          email:
            type: string
            example: ""
          phone:
            type: string
            example: ""
          role:
            type: string
            enum: [admin, user]
            example: admin
          status:
            type: string
            enum: [active, inactive]
            example: active
          createdAt:
            type: string
            format: date
            example: "2024-05-01"
          updatedAt:
            type: string
            format: date
            example: "2024-05-01"
    get-users-count-query-params:
      name: period
      in: query
      required: true
      schema:
        type: string
        enum: [week, month, year, all]
        example: week
    get-products-query-params:
      name: page
      in: query
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            example: 1
          limit:
            type: integer
            example: 10
          sort:
            type: string
            enum: [asc, desc]
            example: desc
          search:
            type: string
            example: ""
          brand:
            type: string
            example: ""
          category:
            type: string
            example: ""
          price:
            type: number
            example: 100000
          discount:
            type: number
            example: 10000
          discountedPrice:
            type: number
            example: 90000
          isAvailable:
            type: boolean
            example: true
          rating:
            type: number
            example: 4.5
          numReviews:
            type: integer
            example: 100
    get-user-by-id-path-params:
      name: id
      in: path
      required: true
      schema:
        type: string
        example: 1234567890
    get-product-by-id-path-params:
      name: id
      in: path
      required: true
      schema:
        type: string
        example: 1234567890
  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: name
                    message:
                      type: string
                      example: نام کاربر الزامی است
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: null
                    message:
                      type: string
                      example: هیچ موردی با این شناسه یافت نشد
    Unauthorized:
      description: Unauthorized. Possible reasons for 401 errors.
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      nullable: true
                      example: null
                    message:
                      type: string
                      example: "شما وارد نشده اید! لطفا برای دسترسی وارد شوید"
          examples:
            NoToken:
              summary: No token provided
              value:
                status: fail
                errors:
                  - field: null
                    message: "شما وارد نشده اید! لطفا برای دسترسی وارد شوید"
            InvalidToken:
              summary: Invalid token
              value:
                status: fail
                errors:
                  - field: null
                    message: "توکن معتبر نیست"
            UserNotExist:
              summary: User for token does not exist
              value:
                status: fail
                errors:
                  - field: null
                    message: "کاربر متعلق به این توکن دیگر وجود ندارد!"
            UserInactive:
              summary: User is inactive
              value:
                status: fail
                errors:
                  - field: null
                    message: "کاربری که به این ایمیل مرتبط است غیرفعال شده!"
            PasswordChanged:
              summary: User changed password after token was issued
              value:
                status: fail
                errors:
                  - field: null
                    message: "کاربر اخیرا رمز عبور را تغییر داده است! لطفا دوباره وارد شوید."
            NotAdmin:
              summary: User's role is not admin
              value:
                status: fail
                errors:
                  - field: null
                    message: "شما اجازه انجام این عمل را ندارید!"