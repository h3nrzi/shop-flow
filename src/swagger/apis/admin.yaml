############################################
########### USER ENDPOINTS #################
############################################

paths:
  /api/users:
    get:
      #----------- GET ALL USERS ------------------
      tags:
        - Admin
      summary: Get all users
      description: Returns a list of all users. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            example: 1
          required: false
          description: شماره صفحه برای صفحه‌بندی نتایج
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
          required: false
          description: تعداد نتایج در هر صفحه
        - in: query
          name: sort
          schema:
            type: string
            enum:
              [
                -name,
                name,
                -email,
                email,
                -role,
                role,
                -active,
                active,
                -createdAt,
                createdAt,
                -updatedAt,
                updatedAt,
              ]
            example: -createdAt
          required: false
          description: ترتیب مرتب‌سازی نتایج (صعودی یا نزولی)
        - in: query
          name: search
          schema:
            type: string
            example: "john"
          required: false
          description: جستجو در نام و ایمیل کاربران
        - in: query
          name: name
          schema:
            type: string
            example: "John Doe"
          required: false
          description: فیلتر بر اساس نام کاربر
        - in: query
          name: email
          schema:
            type: string
            example: "john@example.com"
          required: false
          description: فیلتر بر اساس ایمیل کاربر
        - in: query
          name: role
          schema:
            type: string
            enum: [admin, user]
            example: "user"
          required: false
          description: فیلتر بر اساس نقش کاربر
        - in: query
          name: active
          schema:
            type: boolean
            example: true
          required: false
          description: فیلتر بر اساس وضعیت فعال بودن کاربر
        - in: query
          name: createdAt , createdAt[gt] , createdAt[lt] , createdAt[gte] , createdAt[lte]
          schema:
            type: string
            format: date-time
            example: "2023-01-01T10:00:00.000Z"
          required: false
          description: فیلتر بر اساس تاریخ ایجاد کاربر
        - in: query
          name: updatedAt , updatedAt[gt] , updatedAt[lt] , updatedAt[gte] , updatedAt[lte]
          schema:
            type: string
            format: date-time
            example: "2023-01-01T10:00:00.000Z"
          required: false
          description: فیلتر بر اساس تاریخ آپدیت کاربر
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  results:
                    type: integer
                    example: 10
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedWithAdminAuthorization"
    post:
      #----------- CREATE USER ------------------
      tags:
        - Admin
      summary: Create a new user
      description: Creates a new user. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/Dtos/CreateUserDto"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: name
                        message:
                          type: string
                          example: نام کاربر الزامی است
        "401":
          $ref: "#/components/responses/Unauthorized"

  /api/users/{id}:
    get:
      #----------- GET USER BY ID ------------------
      tags:
        - Admin
      summary: Get user by ID
      description: Returns a user by ID. Only accessible by admin users.
      parameters:
        - $ref: "#/components/parameters/get-user-by-id-path-params"
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedWithAdminAuthorization"
        "404":
          $ref: "#/components/responses/NotFound"

    patch:
      tags:
        #----------- UPDATE USER BY ID ------------------
        - Admin
      summary: Update user by ID
      description: Updates a user by ID. Only accessible by admin users. Only main admin can update other admins.
      parameters:
        - $ref: "#/components/parameters/get-user-by-id-path-params"
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/Dtos/UpdateUserDto"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: email
                        message:
                          type: string
                          example: فرمت ایمیل نامعتبر است
        "401":
          $ref: "#/components/responses/Unauthorized"
        "401-alt":
          description: Unauthorized. An admin tries to update another admin or the main admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: null
                        message:
                          type: string
                          example: "شما نمی توانید حساب ادمین را آپدیت کنید فقط مدیر سیستم می تواند این کار را انجام دهد"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      tags:
        #----------- DELETE USER BY ID ------------------
        - Admin
      summary: Delete user by ID
      description: Deletes a user by ID. Only accessible by admin users. Only main admin can delete other admins.
      parameters:
        - $ref: "#/components/parameters/get-user-by-id-path-params"
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        "204":
          description: User deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "401-alt":
          description: Unauthorized. An admin tries to delete another admin or the main admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: null
                        message:
                          type: string
                          example: "شما نمی توانید حساب ادمین را حذف کنید فقط مدیر سیستم می تواند این کار را انجام دهد"
        "404":
          $ref: "#/components/responses/NotFound"

  /api/users/get-users-count:
    get:
      #----------- GET USERS COUNT ------------------
      tags:
        - Admin
      summary: Get users count by period
      description: Returns the number of users grouped by day/week/month/year/all. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/get-users-count-query-params"
      responses:
        "200":
          description: Users count by period
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      usersCountByDay:
                        type: array
                        items:
                          type: object
                          properties:
                            date:
                              type: string
                              format: date
                              example: "2024-05-01"
                            count:
                              type: integer
                              example: 5
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: period
                        message:
                          type: string
                          example: زمان وارد شده نامعتبر است
        "401":
          $ref: "#/components/responses/UnauthorizedWithAdminAuthorization"

  ############################################
  ########### PRODUCT ENDPOINTS ##############
  ############################################

  /api/products:
    get:
      #----------- GET ALL PRODUCTS (ADMIN) --------
      tags:
        - Admin
      summary: Get all products
      description: Returns a paginated list of all products. Supports filtering, sorting, and search functionality. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            example: 1
          required: false
          description: شماره صفحه برای صفحه‌بندی نتایج
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
          required: false
          description: تعداد نتایج در هر صفحه
        - in: query
          name: sort
          schema:
            type: string
            enum:
              [
                -name,
                name,
                -price,
                price,
                -discountedPrice,
                discountedPrice,
                -discount,
                discount,
                -countInStock,
                countInStock,
                -rating,
                rating,
                -numReviews,
                numReviews,
                -brand,
                brand,
                -category,
                category,
                -isAvailable,
                isAvailable,
                -createdAt,
                createdAt,
                -updatedAt,
                updatedAt,
              ]
            example: -createdAt
          required: false
          description: ترتیب مرتب‌سازی نتایج (صعودی یا نزولی)
        - in: query
          name: search
          schema:
            type: string
            example: "لپ تاپ"
          required: false
          description: جستجو در نام و توضیحات محصول
        - in: query
          name: name
          schema:
            type: string
            example: "لپ تاپ Asus"
          required: false
          description: فیلتر بر اساس نام محصول
        - in: query
          name: brand
          schema:
            type: string
            example: "Asus"
          required: false
          description: فیلتر بر اساس برند محصول
        - in: query
          name: category
          schema:
            type: string
            example: "لپ تاپ"
          required: false
          description: فیلتر بر اساس دسته‌بندی محصول
        - in: query
          name: isAvailable
          schema:
            type: boolean
            example: true
          required: false
          description: فیلتر بر اساس وضعیت در دسترس بودن محصول
        - in: query
          name: price , price[gt] , price[lt] , price[gte] , price[lte]
          schema:
            type: number
            minimum: 0
            example: 15000000
          required: false
          description: فیلتر بر اساس قیمت محصول (به تومان)
        - in: query
          name: discountedPrice , discountedPrice[gt] , discountedPrice[lt] , discountedPrice[gte] , discountedPrice[lte]
          schema:
            type: number
            minimum: 0
            example: 14250000
          required: false
          description: فیلتر بر اساس قیمت بعد از تخفیف (به تومان)
        - in: query
          name: discount , discount[gt] , discount[lt] , discount[gte] , discount[lte]
          schema:
            type: number
            minimum: 0
            maximum: 100
            example: 5
          required: false
          description: فیلتر بر اساس درصد تخفیف
        - in: query
          name: countInStock , countInStock[gt] , countInStock[lt] , countInStock[gte] , countInStock[lte]
          schema:
            type: integer
            minimum: 0
            example: 25
          required: false
          description: فیلتر بر اساس تعداد موجودی انبار
        - in: query
          name: rating , rating[gt] , rating[lt] , rating[gte] , rating[lte]
          schema:
            type: number
            minimum: 0
            maximum: 5
            example: 4.5
          required: false
          description: فیلتر بر اساس امتیاز محصول
        - in: query
          name: numReviews , numReviews[gt] , numReviews[lt] , numReviews[gte] , numReviews[lte]
          schema:
            type: integer
            minimum: 0
            example: 100
          required: false
          description: فیلتر بر اساس تعداد نظرات
        - in: query
          name: createdAt , createdAt[gt] , createdAt[lt] , createdAt[gte] , createdAt[lte]
          schema:
            type: string
            format: date-time
            example: "2023-01-01T10:00:00.000Z"
          required: false
          description: فیلتر بر اساس تاریخ ایجاد محصول
        - in: query
          name: updatedAt , updatedAt[gt] , updatedAt[lt] , updatedAt[gte] , updatedAt[lte]
          schema:
            type: string
            format: date-time
            example: "2023-01-01T10:00:00.000Z"
          required: false
          description: فیلتر بر اساس تاریخ آپدیت محصول
      responses:
        "200":
          description: List of all products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  results:
                    type: integer
                    example: 10
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/UnauthorizedWithAdminAuthorization"
    post:
      #----------- CREATE PRODUCT ------------------
      tags:
        - Admin
      summary: Create a new product
      description: Creates a new product. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/Dtos/CreateProductDto"
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      product:
                        $ref: "#/components/schemas/Product"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: category
                        message:
                          type: string
                          example: دسته بندی الزامی است
        "401":
          $ref: "#/components/responses/UnauthorizedWithAdminAuthorization"

  ############################################
  ########### ORDER ENDPOINTS ###############
  ############################################

  /api/orders:
    #----------- GET ALL ORDERS (ADMIN) --------
    get:
      tags:
        - Admin
      summary: Get all orders
      description: Returns a paginated list of all orders from all users. Supports filtering, sorting, and search functionality. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            example: 1
          required: false
          description: شماره صفحه برای صفحه‌بندی نتایج
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
          required: false
          description: تعداد نتایج در هر صفحه
        - in: query
          name: sort
          schema:
            type: string
            enum:
              [
                -totalPrice,
                totalPrice,
                -itemsPrice,
                itemsPrice,
                -shippingPrice,
                shippingPrice,
                -taxPrice,
                taxPrice,
                -createdAt,
                createdAt,
                -updatedAt,
                updatedAt,
                -paidAt,
                paidAt,
                -deliveredAt,
                deliveredAt,
                -isPaid,
                isPaid,
                -isDelivered,
                isDelivered,
              ]
            example: -createdAt
          required: false
          description: ترتیب مرتب‌سازی نتایج (صعودی یا نزولی)
        - in: query
          name: user
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
            example: "60d21b4667d0d8992e610c86"
          required: false
          description: فیلتر سفارشات بر اساس شناسه کاربر
        - in: query
          name: paymentMethod
          schema:
            type: string
            example: "Credit Card"
          required: false
          description: فیلتر سفارشات بر اساس روش پرداخت
        - in: query
          name: isPaid
          schema:
            type: boolean
            example: true
          required: false
          description: فیلتر سفارشات بر اساس وضعیت پرداخت
        - in: query
          name: isDelivered
          schema:
            type: boolean
            example: false
          required: false
          description: فیلتر سفارشات بر اساس وضعیت تحویل
        - in: query
          name: totalPrice , totalPrice[gt] , totalPrice[lt] , totalPrice[gte] , totalPrice[lte]
          schema:
            type: number
            minimum: 0
            example: 230000
          required: false
          description: فیلتر بر اساس قیمت کل سفارش (به تومان)
        - in: query
          name: itemsPrice , itemsPrice[gt] , itemsPrice[lt] , itemsPrice[gte] , itemsPrice[lte]
          schema:
            type: number
            minimum: 0
            example: 200000
          required: false
          description: فیلتر بر اساس قیمت کالاها (به تومان)
        - in: query
          name: shippingPrice , shippingPrice[gt] , shippingPrice[lt] , shippingPrice[gte] , shippingPrice[lte]
          schema:
            type: number
            minimum: 0
            example: 20000
          required: false
          description: فیلتر بر اساس هزینه ارسال (به تومان)
        - in: query
          name: taxPrice , taxPrice[gt] , taxPrice[lt] , taxPrice[gte] , taxPrice[lte]
          schema:
            type: number
            minimum: 0
            example: 10000
          required: false
          description: فیلتر بر اساس مالیات (به تومان)
        - in: query
          name: createdAt , createdAt[gt] , createdAt[lt] , createdAt[gte] , createdAt[lte]
          schema:
            type: string
            format: date-time
            example: "2023-01-01T10:00:00.000Z"
          required: false
          description: فیلتر بر اساس تاریخ ایجاد سفارش
        - in: query
          name: updatedAt , updatedAt[gt] , updatedAt[lt] , updatedAt[gte] , updatedAt[lte]
          schema:
            type: string
            format: date-time
            example: "2023-01-01T10:00:00.000Z"
          required: false
          description: فیلتر بر اساس تاریخ آپدیت سفارش
        - in: query
          name: paidAt , paidAt[gt] , paidAt[lt] , paidAt[gte] , paidAt[lte]
          schema:
            type: string
            format: date-time
            example: "2023-01-01T12:00:00.000Z"
          required: false
          description: فیلتر بر اساس تاریخ پرداخت
        - in: query
          name: deliveredAt , deliveredAt[gt] , deliveredAt[lt] , deliveredAt[gte] , deliveredAt[lte]
          schema:
            type: string
            format: date-time
            example: "2023-01-02T12:00:00.000Z"
          required: false
          description: فیلتر بر اساس تاریخ تحویل
      responses:
        "200":
          description: List of all orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  results:
                    type: integer
                    example: 10
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: object
                    properties:
                      orders:
                        type: array
                        items:
                          $ref: "#/components/schemas/Order"
        "401":
          $ref: "#/components/responses/UnauthorizedWithAdminAuthorization"

  /api/orders/{id}:
    #----------- UPDATE ORDER (ADMIN) ----------
    patch:
      tags:
        - Admin
      summary: Update order
      description: Updates an existing order. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/get-order-by-id-path-params"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/Dtos/UpdateOrderDto"
      responses:
        "200":
          description: Order updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      order:
                        $ref: "#/components/schemas/Order"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: orderItems
                        message:
                          type: string
                          example: آیتم های سفارش الزامی است
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/UnauthorizedWithAdminAuthorization"

      #----------- DELETE ORDER (ADMIN) ----------
    delete:
      tags:
        - Admin
      summary: Delete order
      description: Deletes an existing order. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/get-order-by-id-path-params"
      responses:
        "204":
          description: Order deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success

        "401":
          $ref: "#/components/responses/UnauthorizedWithAdminAuthorization"
        "404":
          $ref: "#/components/responses/NotFound"

  /api/orders/{id}/deliver:
    #----------- UPDATE ORDER TO DELIVERED -----
    patch:
      tags:
        - Admin
      summary: Update order to delivered
      description: Marks an order as delivered. Only accessible by admin users.
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/get-order-by-id-path-params"
      responses:
        "200":
          description: Order marked as delivered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      order:
                        $ref: "#/components/schemas/Order"
        "401":
          $ref: "#/components/responses/UnauthorizedWithAdminAuthorization"
        "404":
          $ref: "#/components/responses/NotFound"

  ###################################################
  ########### NOTIFICATIONS ENDPOINTS ###############
  ###################################################

  /api/notifications:
    # ------------------------------------------------ CREATE NOTIFICATION (ADMIN ONLY) -------------------------
    post:
      tags:
        - Admin
      summary: Create a notification
      description: Creates a new notification for a specific user. Only admins can create notifications.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/Dtos/CreateNotificationDto"
      responses:
        "201":
          description: Notification created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      notification:
                        $ref: "#/components/schemas/Notification"
        "400":
          description: Validation error or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: user
                        message:
                          type: string
                          example: "کاربر مورد نظر یافت نشد"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /api/notifications/bulk:
    # ------------------------------------------------ CREATE BULK NOTIFICATIONS (ADMIN ONLY) ------------------
    post:
      tags:
        - Admin
      summary: Create bulk notifications
      description: Creates notifications for multiple users at once. Only admins can create bulk notifications.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/Dtos/CreateBulkNotificationDto"
      responses:
        "201":
          description: Bulk notifications created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  results:
                    type: number
                    example: 3
                    description: Number of notifications created
                  data:
                    type: object
                    properties:
                      notifications:
                        type: array
                        items:
                          $ref: "#/components/schemas/Notification"
        "400":
          description: Validation error or some users not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: userIds
                        message:
                          type: string
                          example: "برخی از کاربران مورد نظر یافت نشدند"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

############################################
########### REFERENCES #####################
############################################

components:
  Dtos:
    CreateUserDto:
      type: object
      required:
        - name
        - email
        - password
        - passwordConfirmation
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com
        password:
          type: string
          format: password
          example: StrongPass123!
        passwordConfirmation:
          type: string
          format: password
          example: StrongPass123!
        active:
          type: boolean
          example: true
    UpdateUserDto:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com
        photo:
          type: string
          example: https://example.com/avatar.jpg
        active:
          type: boolean
          example: true
    CreateProductDto:
      type: object
      required:
        - name
        - description
        - image
        - price
        - countInStock
        - brand
        - category
      properties:
        name:
          type: string
          example: لپ تاپ Asus VivoBook
        description:
          type: string
          example: لپ تاپ قدرتمند با پردازنده Intel Core i5
        image:
          type: string
          example: https://example.com/laptop.jpg
        images:
          type: array
          items:
            type: string
            example: https://example.com/laptop2.jpg
        price:
          type: number
          example: 15000000
        countInStock:
          type: integer
          example: 25
        brand:
          type: string
          example: Asus
        category:
          type: string
          example: لپ تاپ
        discount:
          type: number
          example: 5
        isAvailable:
          type: boolean
          example: true
    UpdateOrderDto:
      type: object
      properties:
        orderItems:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                pattern: "^[0-9a-fA-F]{24}$"
                example: "60d21b4667d0d8992e610c85"
              qty:
                type: integer
                minimum: 1
                example: 3
        shippingAddress:
          $ref: "#/components/schemas/ShippingAddress"
        paymentMethod:
          type: string
          example: "PayPal"
        itemsPrice:
          type: number
          minimum: 0
          example: 150000
        shippingPrice:
          type: number
          minimum: 0
          example: 15000
        taxPrice:
          type: number
          minimum: 0
          example: 8000
        totalPrice:
          type: number
          minimum: 0
          example: 173000
  parameters:
    get-users-query-params:
      name: page
      in: query
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            example: 1
          limit:
            type: integer
            example: 10
          sort:
            type: string
            enum: [asc, desc]
            example: desc
          search:
            type: string
            example: ""
          name:
            type: string
            example: ""
          email:
            type: string
            example: ""
          phone:
            type: string
            example: ""
          role:
            type: string
            enum: [admin, user]
            example: admin
          status:
            type: string
            enum: [active, inactive]
            example: active
          createdAt:
            type: string
            format: date
            example: "2024-05-01"
          updatedAt:
            type: string
            format: date
            example: "2024-05-01"
    get-users-count-query-params:
      name: period
      in: query
      required: true
      schema:
        type: string
        enum: [week, month, year, all]
        example: week
    get-products-query-params:
      name: page
      in: query
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            example: 1
          limit:
            type: integer
            example: 10
          sort:
            type: string
            enum: [asc, desc]
            example: desc
          search:
            type: string
            example: ""
          brand:
            type: string
            example: ""
          category:
            type: string
            example: ""
          price:
            type: number
            example: 100000
          discount:
            type: number
            example: 10000
          discountedPrice:
            type: number
            example: 90000
          isAvailable:
            type: boolean
            example: true
          rating:
            type: number
            example: 4.5
          numReviews:
            type: integer
            example: 100
    get-user-by-id-path-params:
      name: id
      in: path
      required: true
      schema:
        type: string
        example: 1234567890
    get-product-by-id-path-params:
      name: id
      in: path
      required: true
      schema:
        type: string
        example: 1234567890
    get-order-by-id-path-params:
      name: id
      in: path
      required: true
      schema:
        type: string
        pattern: "^[0-9a-fA-F]{24}$"
        example: "60d21b4667d0d8992e610c85"
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: null
                    message:
                      type: string
                      example: هیچ موردی با این شناسه یافت نشد
    UnauthorizedWithAdminAuthorization:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      nullable: true
                      example: null
                    message:
                      type: string
                      example: "شما وارد نشده اید! لطفا برای دسترسی وارد شوید"
          examples:
            NoToken:
              summary: No token provided
              value:
                status: fail
                errors:
                  - field: null
                    message: "شما وارد نشده اید! لطفا برای دسترسی وارد شوید"
            InvalidToken:
              summary: Invalid token
              value:
                status: fail
                errors:
                  - field: null
                    message: "توکن معتبر نیست"
            UserNotExist:
              summary: User for token does not exist
              value:
                status: fail
                errors:
                  - field: null
                    message: "کاربر متعلق به این توکن دیگر وجود ندارد!"
            UserInactive:
              summary: User is inactive
              value:
                status: fail
                errors:
                  - field: null
                    message: "کاربری که به این ایمیل مرتبط است غیرفعال شده!"
            PasswordChanged:
              summary: User changed password after token was issued
              value:
                status: fail
                errors:
                  - field: null
                    message: "کاربر اخیرا رمز عبور را تغییر داده است! لطفا دوباره وارد شوید."
            NotAdmin:
              summary: User's role is not admin
              value:
                status: fail
                errors:
                  - field: null
                    message: "شما اجازه انجام این عمل را ندارید!"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      nullable: true
                      example: null
                    message:
                      type: string
                      example: "شما وارد نشده اید! لطفا برای دسترسی وارد شوید"
          examples:
            NoToken:
              summary: No token provided
              value:
                status: fail
                errors:
                  - field: null
                    message: "شما وارد نشده اید! لطفا برای دسترسی وارد شوید"
            InvalidToken:
              summary: Invalid token
              value:
                status: fail
                errors:
                  - field: null
                    message: "توکن معتبر نیست"
            UserNotExist:
              summary: User for token does not exist
              value:
                status: fail
                errors:
                  - field: null
                    message: "کاربر متعلق به این توکن دیگر وجود ندارد!"
            UserInactive:
              summary: User is inactive
              value:
                status: fail
                errors:
                  - field: null
                    message: "کاربری که به این ایمیل مرتبط است غیرفعال شده!"
            PasswordChanged:
              summary: User changed password after token was issued
              value:
                status: fail
                errors:
                  - field: null
                    message: "کاربر اخیرا رمز عبور را تغییر داده است! لطفا دوباره وارد شوید."
